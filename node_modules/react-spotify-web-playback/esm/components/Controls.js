import * as React from 'react';
import { px, styled } from '../styles';
import Next from './icons/Next';
import Pause from './icons/Pause';
import Play from './icons/Play';
import Previous from './icons/Previous';
var Wrapper = styled('div')({}, function (_a) {
    var styles = _a.styles;
    return ({
        alignItems: 'center',
        display: 'flex',
        height: px(styles.height),
        justifyContent: 'center',
        '@media (max-width: 767px)': {
            padding: px(10),
        },
        '> div': {
            minWidth: px(styles.height),
            textAlign: 'center',
        },
        button: {
            color: styles.color,
            fontSize: px(16),
            '&.rswp__toggle': {
                fontSize: px(28),
            },
        },
    });
}, 'ControlsRSWP');
export default function Controls(props) {
    var isExternalDevice = props.isExternalDevice, isPlaying = props.isPlaying, onClickNext = props.onClickNext, onClickPrevious = props.onClickPrevious, onClickTogglePlay = props.onClickTogglePlay, nextTracks = props.nextTracks, previousTracks = props.previousTracks, styles = props.styles;
    return (React.createElement(Wrapper, { styles: styles },
        React.createElement("div", null, (!!previousTracks.length || isExternalDevice) && (React.createElement("button", { type: "button", onClick: onClickPrevious, "aria-label": "Previous Track" },
            React.createElement(Previous, null)))),
        React.createElement("div", null,
            React.createElement("button", { type: "button", className: "rswp__toggle", onClick: onClickTogglePlay, "aria-label": isPlaying ? 'Pause' : 'Play' }, isPlaying ? React.createElement(Pause, null) : React.createElement(Play, null))),
        React.createElement("div", null, (!!nextTracks.length || isExternalDevice) && (React.createElement("button", { type: "button", onClick: onClickNext, "aria-label": "Next Track" },
            React.createElement(Next, null))))));
}
//# sourceMappingURL=Controls.js.map