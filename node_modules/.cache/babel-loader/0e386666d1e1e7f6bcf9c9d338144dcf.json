{"ast":null,"code":"export const initialState = {\n  user: null,\n  playlists: [],\n  discover_weekly: null,\n  top_artists: null,\n  playing: false,\n  item: null,\n  token: null,\n  play_uri: \"spotify:playlist:37i9dQZEVXcIdICMRECAXa\"\n  //enter your own discover weekly uri before production\n}; //empty initialState\n\n//https://reactjs.org/docs/hooks-reference.html#usereducer\n//reducer = (state, action) => newState\n\nexport const reducer = (state, action) => {\n  //console.log(action)\n  //Action -> type, [payload]\n  switch (action.type) {\n    case 'SET_USER':\n      //whenever there's a set_user reducer a new state where the user in the initial is set to user\n      return {\n        /**\n         * this syntax is part of ES6 and not React itself and it's used by two operators - the Spread and Rest operators.\n            The Spread operator lets you expand an iterable like a string, object or array into its elements while the Rest operator does the inverse by reducing a set of elemnts into one array.\n         */\n        ...state,\n        user: action.user\n      };\n    case 'SET_TOKEN':\n      return {\n        ...state,\n        token: action.token\n      };\n    case 'SET_PLAYLISTS':\n      return {\n        ...state,\n        playlists: action.playlists\n      };\n    case 'SET_DISCOVER_WEEKLY':\n      return {\n        ...state,\n        discover_weekly: action.discover_weekly\n      };\n    case 'SET_TOP_ARTISTS':\n      return {\n        ...state,\n        top_artists: action.top_artists\n      };\n    case \"SET_PLAYING\":\n      return {\n        ...state,\n        playing: action.playing\n      };\n    case \"SET_ITEM\":\n      return {\n        ...state,\n        item: action.item\n      };\n    case \"SET_PLAY_URI\":\n      return {\n        ...state,\n        play_uri: action.play_uri\n      };\n    default:\n      return state;\n    //if nothing happens just returns state as it is\n  }\n};\n\n/**\n * this.state = {\n  stateObj: {\n    attr1: '',\n    attr2: '',\n  },\n}\nYou can use the Spread syntax to update the nested state object.\n\nthis.setState(state => ({\n  person: {\n    ...state.stateObj,\n    attr1: 'value1',\n    attr2: 'value2',\n  },\n}))\nThe Rest Ope\n */","map":{"version":3,"names":["initialState","user","playlists","discover_weekly","top_artists","playing","item","token","play_uri","reducer","state","action","type"],"sources":["/Users/siddharthkeshar/Desktop/Projects for CV/spotify-clone-master/src/reducer.js"],"sourcesContent":["export const initialState = {\n    user:null,\n    playlists:[],\n    discover_weekly: null,\n    top_artists: null,\n    playing:false,\n    item: null,\n    token:null,\n    play_uri:\"spotify:playlist:37i9dQZEVXcIdICMRECAXa\",\n    //enter your own discover weekly uri before production\n}//empty initialState\n\n//https://reactjs.org/docs/hooks-reference.html#usereducer\n//reducer = (state, action) => newState\n\nexport const reducer = (state , action) => {\n    //console.log(action)\n    //Action -> type, [payload]\n    switch(action.type) {\n        case 'SET_USER':\n        //whenever there's a set_user reducer a new state where the user in the initial is set to user\n            return {\n            /**\n             * this syntax is part of ES6 and not React itself and it's used by two operators - the Spread and Rest operators.\n                The Spread operator lets you expand an iterable like a string, object or array into its elements while the Rest operator does the inverse by reducing a set of elemnts into one array.\n             */\n                ...state, \n                user:action.user,\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token:action.token,\n            }\n        case 'SET_PLAYLISTS':\n          return{\n            ...state,\n            playlists:action.playlists,\n           \n          }\n          case 'SET_DISCOVER_WEEKLY':\n            return{\n              ...state,\n              discover_weekly:action.discover_weekly,\n            }\n          case 'SET_TOP_ARTISTS':\n            return{\n              ...state,\n              top_artists:action.top_artists,\n            }\n            case \"SET_PLAYING\":\n              return {\n                ...state,\n                playing: action.playing,\n              }\n        \n            case \"SET_ITEM\":\n              return {\n                ...state,\n                item: action.item,\n              }\n            case \"SET_PLAY_URI\":\n              return{\n                ...state,\n                play_uri:action.play_uri,\n              }\n        default:\n            return state; //if nothing happens just returns state as it is\n    }\n   \n}\n\n/**\n * this.state = {\n  stateObj: {\n    attr1: '',\n    attr2: '',\n  },\n}\nYou can use the Spread syntax to update the nested state object.\n\nthis.setState(state => ({\n  person: {\n    ...state.stateObj,\n    attr1: 'value1',\n    attr2: 'value2',\n  },\n}))\nThe Rest Ope\n */\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;EACxBC,IAAI,EAAC,IAAI;EACTC,SAAS,EAAC,EAAE;EACZC,eAAe,EAAE,IAAI;EACrBC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAC,KAAK;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAC,IAAI;EACVC,QAAQ,EAAC;EACT;AACJ,CAAC;;AAED;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAGC,MAAM,KAAK;EACvC;EACA;EACA,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,UAAU;MACf;MACI,OAAO;QACP;AACZ;AACA;AACA;QACgB,GAAGF,KAAK;QACRT,IAAI,EAACU,MAAM,CAACV;MAChB,CAAC;IACL,KAAK,WAAW;MACZ,OAAO;QACH,GAAGS,KAAK;QACRH,KAAK,EAACI,MAAM,CAACJ;MACjB,CAAC;IACL,KAAK,eAAe;MAClB,OAAM;QACJ,GAAGG,KAAK;QACRR,SAAS,EAACS,MAAM,CAACT;MAEnB,CAAC;IACD,KAAK,qBAAqB;MACxB,OAAM;QACJ,GAAGQ,KAAK;QACRP,eAAe,EAACQ,MAAM,CAACR;MACzB,CAAC;IACH,KAAK,iBAAiB;MACpB,OAAM;QACJ,GAAGO,KAAK;QACRN,WAAW,EAACO,MAAM,CAACP;MACrB,CAAC;IACD,KAAK,aAAa;MAChB,OAAO;QACL,GAAGM,KAAK;QACRL,OAAO,EAAEM,MAAM,CAACN;MAClB,CAAC;IAEH,KAAK,UAAU;MACb,OAAO;QACL,GAAGK,KAAK;QACRJ,IAAI,EAAEK,MAAM,CAACL;MACf,CAAC;IACH,KAAK,cAAc;MACjB,OAAM;QACJ,GAAGI,KAAK;QACRF,QAAQ,EAACG,MAAM,CAACH;MAClB,CAAC;IACP;MACI,OAAOE,KAAK;IAAE;EACtB;AAEJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}