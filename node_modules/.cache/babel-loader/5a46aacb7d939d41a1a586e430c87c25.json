{"ast":null,"code":"export const initialState = {\n  user: null,\n  playlists: [],\n  discover_weekly: null,\n  top_artists: null,\n  playing: false,\n  item: null,\n  token: null,\n  play_uri: \"spotify:playlist:37i9dQZEVXcIdICMRECAXa\" //enter your own discover weekly uri before production\n\n}; //empty initialState\n//https://reactjs.org/docs/hooks-reference.html#usereducer\n//reducer = (state, action) => newState\n\nexport const reducer = (state, action) => {\n  //console.log(action)\n  //Action -> type, [payload]\n  switch (action.type) {\n    case 'SET_USER':\n      //whenever there's a set_user reducer a new state where the user in the initial is set to user\n      return {\n        /**\n         * this syntax is part of ES6 and not React itself and it's used by two operators - the Spread and Rest operators.\n            The Spread operator lets you expand an iterable like a string, object or array into its elements while the Rest operator does the inverse by reducing a set of elemnts into one array.\n         */\n        ...state,\n        user: action.user\n      };\n\n    case 'SET_TOKEN':\n      return { ...state,\n        token: action.token\n      };\n\n    case 'SET_PLAYLISTS':\n      return { ...state,\n        playlists: action.playlists\n      };\n\n    case 'SET_DISCOVER_WEEKLY':\n      return { ...state,\n        discover_weekly: action.discover_weekly\n      };\n\n    case 'SET_TOP_ARTISTS':\n      return { ...state,\n        top_artists: action.top_artists\n      };\n\n    case \"SET_PLAYING\":\n      return { ...state,\n        playing: action.playing\n      };\n\n    case \"SET_ITEM\":\n      return { ...state,\n        item: action.item\n      };\n\n    case \"SET_PLAY_URI\":\n      return { ...state,\n        play_uri: action.play_uri\n      };\n\n    default:\n      return state;\n    //if nothing happens just returns state as it is\n  }\n};\n/**\n * this.state = {\n  stateObj: {\n    attr1: '',\n    attr2: '',\n  },\n}\nYou can use the Spread syntax to update the nested state object.\n\nthis.setState(state => ({\n  person: {\n    ...state.stateObj,\n    attr1: 'value1',\n    attr2: 'value2',\n  },\n}))\nThe Rest Ope\n */","map":{"version":3,"sources":["/Users/siddharthkeshar/Desktop/Projects for CV/spotify-clone-master/src/reducer.js"],"names":["initialState","user","playlists","discover_weekly","top_artists","playing","item","token","play_uri","reducer","state","action","type"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAC,IADmB;AAExBC,EAAAA,SAAS,EAAC,EAFc;AAGxBC,EAAAA,eAAe,EAAE,IAHO;AAIxBC,EAAAA,WAAW,EAAE,IAJW;AAKxBC,EAAAA,OAAO,EAAC,KALgB;AAMxBC,EAAAA,IAAI,EAAE,IANkB;AAOxBC,EAAAA,KAAK,EAAC,IAPkB;AAQxBC,EAAAA,QAAQ,EAAC,yCARe,CASxB;;AATwB,CAArB,C,CAUN;AAED;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAASC,MAAT,KAAoB;AACvC;AACA;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,UAAL;AACA;AACI,aAAO;AACP;;;;AAII,WAAGF,KALA;AAMHT,QAAAA,IAAI,EAACU,MAAM,CAACV;AANT,OAAP;;AAQJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,KAAK,EAACI,MAAM,CAACJ;AAFV,OAAP;;AAIJ,SAAK,eAAL;AACE,aAAM,EACJ,GAAGG,KADC;AAEJR,QAAAA,SAAS,EAACS,MAAM,CAACT;AAFb,OAAN;;AAKA,SAAK,qBAAL;AACE,aAAM,EACJ,GAAGQ,KADC;AAEJP,QAAAA,eAAe,EAACQ,MAAM,CAACR;AAFnB,OAAN;;AAIF,SAAK,iBAAL;AACE,aAAM,EACJ,GAAGO,KADC;AAEJN,QAAAA,WAAW,EAACO,MAAM,CAACP;AAFf,OAAN;;AAIA,SAAK,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELL,QAAAA,OAAO,EAAEM,MAAM,CAACN;AAFX,OAAP;;AAKF,SAAK,UAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELJ,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFR,OAAP;;AAIF,SAAK,cAAL;AACE,aAAM,EACJ,GAAGI,KADC;AAEJF,QAAAA,QAAQ,EAACG,MAAM,CAACH;AAFZ,OAAN;;AAIN;AACI,aAAOE,KAAP;AAAa;AAjDrB;AAoDH,CAvDM;AAyDP","sourcesContent":["export const initialState = {\n    user:null,\n    playlists:[],\n    discover_weekly: null,\n    top_artists: null,\n    playing:false,\n    item: null,\n    token:null,\n    play_uri:\"spotify:playlist:37i9dQZEVXcIdICMRECAXa\",\n    //enter your own discover weekly uri before production\n}//empty initialState\n\n//https://reactjs.org/docs/hooks-reference.html#usereducer\n//reducer = (state, action) => newState\n\nexport const reducer = (state , action) => {\n    //console.log(action)\n    //Action -> type, [payload]\n    switch(action.type) {\n        case 'SET_USER':\n        //whenever there's a set_user reducer a new state where the user in the initial is set to user\n            return {\n            /**\n             * this syntax is part of ES6 and not React itself and it's used by two operators - the Spread and Rest operators.\n                The Spread operator lets you expand an iterable like a string, object or array into its elements while the Rest operator does the inverse by reducing a set of elemnts into one array.\n             */\n                ...state, \n                user:action.user\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token:action.token\n            }\n        case 'SET_PLAYLISTS':\n          return{\n            ...state,\n            playlists:action.playlists,\n           \n          }\n          case 'SET_DISCOVER_WEEKLY':\n            return{\n              ...state,\n              discover_weekly:action.discover_weekly,\n            }\n          case 'SET_TOP_ARTISTS':\n            return{\n              ...state,\n              top_artists:action.top_artists,\n            }\n            case \"SET_PLAYING\":\n              return {\n                ...state,\n                playing: action.playing,\n              }\n        \n            case \"SET_ITEM\":\n              return {\n                ...state,\n                item: action.item,\n              }\n            case \"SET_PLAY_URI\":\n              return{\n                ...state,\n                play_uri:action.play_uri\n              }\n        default:\n            return state //if nothing happens just returns state as it is\n    }\n   \n}\n\n/**\n * this.state = {\n  stateObj: {\n    attr1: '',\n    attr2: '',\n  },\n}\nYou can use the Spread syntax to update the nested state object.\n\nthis.setState(state => ({\n  person: {\n    ...state.stateObj,\n    attr1: 'value1',\n    attr2: 'value2',\n  },\n}))\nThe Rest Ope\n */\n"]},"metadata":{},"sourceType":"module"}