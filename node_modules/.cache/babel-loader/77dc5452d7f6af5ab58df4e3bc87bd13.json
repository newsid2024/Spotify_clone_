{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthkeshar/Desktop/Projects for CV/spotify-clone-master/src/components/Footer.js\";\nimport React, { useEffect } from 'react';\nimport \"./styles/Footer.css\";\n/*import PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\"\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\"\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\"\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\"\nimport RepeatIcon from \"@material-ui/icons/Repeat\"\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\"\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\"\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\"\nimport { Grid, Slider } from \"@material-ui/core\"*/\n\nimport { useDataLayerValue } from '../DataLayer';\nimport SpotifyPlayer from 'react-spotify-web-playback'; //npm i react-spotify-web-playback\n//https://github.com/gilbarbara/react-spotify-web-playback\n\nexport const Footer = ({\n  spotify\n}) => {\n  const [{\n    play_uri,\n    token,\n    playing\n  }, dispatch] = useDataLayerValue();\n  let track = null;\n  useEffect(() => {\n    spotify.getMyCurrentPlaybackState().then(r => {\n      console.log(r);\n      dispatch({\n        type: \"SET_PLAYING\",\n        playing: r.is_playing\n      });\n      dispatch({\n        type: \"SET_ITEM\",\n        item: r.item\n      });\n    });\n  }, [spotify, dispatch]);\n\n  const handleChange = () => {\n    dispatch({\n      type: \"SET_ITEM\",\n      item: track\n    });\n\n    if (!track.isPlaying) {\n      dispatch({\n        type: \"SET_PLAYING\",\n        playing: track.isPlaying\n      });\n    }\n  };\n  /*  const skipNext = () => {\n      spotify.skipToNext()\n      spotify.getMyCurrentPlayingTrack().then((r) => {\n        dispatch({\n          type: \"SET_ITEM\",\n          item: r.item,\n        })\n        dispatch({\n          type: \"SET_PLAYING\",\n          playing: true,\n        })\n      })\n    }\n     const skipPrevious = () => {\n      spotify.skipToPrevious()\n      spotify.getMyCurrentPlayingTrack().then((r) => {\n        dispatch({\n          type: \"SET_ITEM\",\n          item: r.item,\n        })\n        dispatch({\n          type: \"SET_PLAYING\",\n          playing: true,\n        })\n      })\n    }*/\n\n\n  return /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer_player_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SpotifyPlayer, {\n    name: \"Spotify-clone\",\n    token: token,\n    uris: [play_uri],\n    styles: {\n      bgColor: ' #282828',\n      color: '#fff',\n      loaderColor: '#1DB954',\n      sliderColor: '#1DB954',\n      savedColor: '#fff',\n      trackArtistColor: '#ccc',\n      trackNameColor: '#fff',\n      loaderSize: 1.5,\n      sliderHandleColor: \"#fff\"\n    },\n    play: playing,\n    callback: state => {\n      track = state;\n\n      if (track.isPlaying) {\n        handleChange();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/siddharthkeshar/Desktop/Projects for CV/spotify-clone-master/src/components/Footer.js"],"names":["React","useEffect","useDataLayerValue","SpotifyPlayer","Footer","spotify","play_uri","token","playing","dispatch","track","getMyCurrentPlaybackState","then","r","console","log","type","is_playing","item","handleChange","isPlaying","bgColor","color","loaderColor","sliderColor","savedColor","trackArtistColor","trackNameColor","loaderSize","sliderHandleColor","state"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,qBAAP;AACA;;;;;;;;;;AASA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAOC,aAAP,MAA0B,4BAA1B,C,CACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC9B,QAAM,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,EAA8BC,QAA9B,IAA0CP,iBAAiB,EAAjE;AAEA,MAAIQ,KAAK,GAAC,IAAV;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACM,yBAAR,GAAoCC,IAApC,CAA0CC,CAAD,IAAO;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEAJ,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,aADC;AAEPR,QAAAA,OAAO,EAAEK,CAAC,CAACI;AAFJ,OAAD,CAAR;AAKAR,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,UADC;AAEPE,QAAAA,IAAI,EAAEL,CAAC,CAACK;AAFD,OAAD,CAAR;AAID,KAZD;AAaD,GAdM,EAcJ,CAACb,OAAD,EAASI,QAAT,CAdI,CAAT;;AAgBC,QAAMU,YAAY,GAAG,MAAM;AACxBV,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE,UADC;AAEPE,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;;AAIA,QAAG,CAACA,KAAK,CAACU,SAAV,EAAoB;AAClBX,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,aADC;AAEPR,QAAAA,OAAO,EAAEE,KAAK,CAACU;AAFR,OAAD,CAAR;AAID;AACF,GAXF;AAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,aAAD;AACI,IAAA,IAAI,EAAC,eADT;AAEI,IAAA,KAAK,EAAEb,KAFX;AAGI,IAAA,IAAI,EAAE,CAACD,QAAD,CAHV;AAII,IAAA,MAAM,EAAE;AACJe,MAAAA,OAAO,EAAE,UADL;AAEJC,MAAAA,KAAK,EAAE,MAFH;AAGJC,MAAAA,WAAW,EAAE,SAHT;AAIJC,MAAAA,WAAW,EAAE,SAJT;AAKJC,MAAAA,UAAU,EAAE,MALR;AAMJC,MAAAA,gBAAgB,EAAE,MANd;AAOJC,MAAAA,cAAc,EAAE,MAPZ;AAQJC,MAAAA,UAAU,EAAC,GARP;AASJC,MAAAA,iBAAiB,EAAE;AATf,KAJZ;AAeI,IAAA,IAAI,EAAErB,OAfV;AAgBI,IAAA,QAAQ,EAAGsB,KAAD,IAAS;AACfpB,MAAAA,KAAK,GAACoB,KAAN;;AACA,UAAIpB,KAAK,CAACU,SAAV,EAAoB;AAClBD,QAAAA,YAAY;AACb;AACJ,KArBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ,CADJ;AA6BH,CAzFM","sourcesContent":["import React,{useEffect} from 'react'\nimport \"./styles/Footer.css\"\n/*import PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\"\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\"\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\"\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\"\nimport RepeatIcon from \"@material-ui/icons/Repeat\"\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\"\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\"\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\"\nimport { Grid, Slider } from \"@material-ui/core\"*/\nimport { useDataLayerValue } from '../DataLayer'\nimport SpotifyPlayer from 'react-spotify-web-playback'\n//npm i react-spotify-web-playback\n//https://github.com/gilbarbara/react-spotify-web-playback\n\nexport const Footer =({spotify})=>{\n    const [{play_uri, token, playing }, dispatch] = useDataLayerValue()\n\n    let track=null\n    useEffect(() => {\n        spotify.getMyCurrentPlaybackState().then((r) => {\n          console.log(r)\n    \n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: r.is_playing,\n          })\n    \n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n        })\n      }, [spotify,dispatch])\n\n     const handleChange = () => {\n        dispatch({\n          type: \"SET_ITEM\",\n          item: track,\n        })\n        if(!track.isPlaying){\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: track.isPlaying\n          })\n        }\n      }\n\n    /*  const skipNext = () => {\n        spotify.skipToNext()\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n        })\n      }\n\n      const skipPrevious = () => {\n        spotify.skipToPrevious()\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n        })\n      }*/\n    return(\n        <footer >\n            <div className=\"footer_player_container\">\n            <SpotifyPlayer \n                name='Spotify-clone'\n                token={token}\n                uris={[play_uri]}\n                styles={{\n                    bgColor: ' #282828',\n                    color: '#fff',\n                    loaderColor: '#1DB954',\n                    sliderColor: '#1DB954',\n                    savedColor: '#fff',\n                    trackArtistColor: '#ccc',\n                    trackNameColor: '#fff',\n                    loaderSize:1.5,\n                    sliderHandleColor: \"#fff\"\n                  }}\n                play={playing}\n                callback={(state)=>{\n                    track=state\n                    if (track.isPlaying){\n                      handleChange()\n                    }\n                }}\n                />\n            </div>\n        </footer>\n    )\n}"]},"metadata":{},"sourceType":"module"}