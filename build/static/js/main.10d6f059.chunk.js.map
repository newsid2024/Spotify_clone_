{"version":3,"sources":["components/spotify.js","components/Login.js","DataLayer.js","components/Header.js","components/SongRow.js","components/Body.js","components/Footer.js","components/SidebarOption.js","components/Sidebar.js","components/Player.js","App.js","serviceWorker.js","index.js","reducer.js"],"names":["redirectUri","window","location","origin","loginUrl","concat","join","Login","React","createElement","className","src","alt","href","DataLayerContext","createContext","DataLayer","_ref","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Header","_user$images$","_useDataLayerValue","user","_slicedToArray","SearchIcon","placeholder","type","Avatar","images","url","display_name","SongRow","track","_useDataLayerValue2","play_uri","dispatch","onClick","uri","playing","console","log","album","name","artists","map","artist","Body","spotify","discover_weekly","description","PlayCircleFilled","getMyCurrentPlayingTrack","then","r","item","FavoriteBorderIcon","fontSize","MoreHorizIcon","tracks","items","key","Footer","_useDataLayerValue2$","token","useEffect","getMyCurrentPlaybackState","is_playing","SpotifyPlayer","uris","styles","bgColor","color","loaderColor","sliderColor","savedColor","trackArtistColor","trackNameColor","loaderSize","sliderHandleColor","play","callback","state","isPlaying","SidebarOption","option","Icon","Sidebar","_playlists$items","playlists","HomeOutlinedIcon","LibraryMusicOutlinedIcon","playlist","id","Player","spotifyOb","SpotifyWebApi","App","hash","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getMe","getUserPlaylists","getMyTopArtists","response","top_artists","getPlaylist","Boolean","hostname","match","ReactDOM","render","StrictMode","action","_objectSpread","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10d6f059.chunk.js","sourcesContent":["// https://developer.spotify.com/documentation/web-playback-sdk/quick-start/#\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\"\n\nconst redirectUri =window.location.origin + '/'\n\nconst clientId = \"b520e14a69d84d1692b7579b03d3d74d\"\n\nconst scopes = [\n  \"streaming\",\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-read-email\",\n  \"user-read-private\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n]\n\nexport const getAccessToken = () =>{\n  return window.location.hash\n  .substring(1)//removing the # in the string\n  .split('&')//spliting the access token string from the other post varaibles\n  .reduce((initial,item) => {\n    let parts = item.split('=')\n    initial[parts[0]] = decodeURIComponent(parts[1])\n    return initial\n  },{})\n  \n  /**\n   * reduce() method reduces the array to a single value.\n   * The reduce() method executes a provided function for each value of the array (from left-to-right).\n   * The return value of the function is stored in an accumulator (total/initial).\n   * initial is the initialValue, or the previously returned value of the function\n   * item is the value of the current element\n   * \n   * parts is spiliting the string into before = and after\n   * then initial is set to a single value i.e parts[1]\n   * then reduce() method returns a single value to the getAccessToken variable\n   * \n   * decodeURIComponent()???\n   * \n   */\n}\n\n\n//https://developer.spotify.com/documentation/general/guides/authorization-guide/\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}\n&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}\n&response_type=token&show_dialog=true`","import React from 'react'\nimport './styles/Login.css'\nimport {loginUrl} from \"./spotify\"\n\nfunction Login(){\n    return(\n        <div className=\"login\">\n             <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"Spotify logo\"></img>\n            <a href={loginUrl}>Login With Spotify</a>\n        </div>\n    )\n}\nexport default Login","import React , {\n    createContext,\n    useContext,\n    useReducer\n} from 'react'\n\nexport const DataLayerContext = createContext() \n\nexport const DataLayer = ({initialState , reducer , children}) => \n    <DataLayerContext.Provider value={useReducer(reducer,initialState)}>\n        {children}\n    </DataLayerContext.Provider>\n//for DataLayer in index.js\n\nexport const useDataLayerValue = () => useContext(DataLayerContext)","import React from 'react'\nimport \"./styles/Header.css\"\nimport SearchIcon from '@material-ui/icons/Search'\nimport { Avatar } from '@material-ui/core'\nimport {useDataLayerValue} from '../DataLayer'\n\nexport const Header = () => {\n    const [{user}] = useDataLayerValue()\n    return(\n        <header>\n            <div className=\"header_left\">\n                <SearchIcon/>\n                <input\n                    placeholder=\"Search for Artists, Songs, or Podcasts \"\n                    type=\"text\"\n                    />\n            </div>\n            <div className=\"header_right\"> \n            <Avatar src={user?.images[0]?.url} alt=\"NP\" />\n                <h4>{user?.display_name} </h4>\n            </div>\n        </header>\n    )\n}","import React from 'react'\nimport { useDataLayerValue } from '../DataLayer'\nimport \"./styles/SongRow.css\"\n\nexport const SongRow = ({track}) => {\n    const [{play_uri},dispatch] = useDataLayerValue()\n   \n    function handleClick(){\n    \n       dispatch(\n            {\n                type:'SET_PLAY_URI',\n                play_uri:track.uri,\n            }\n        )\n        dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n          \n        if (play_uri )\n        console.log(\"👍\")\n    }\n    \n    return(\n        \n        <div className=\"song_row\" onClick={handleClick} >\n            <img className=\"song_rowAlbum\" src={track.album.images[0].url} alt=\"\"></img>\n            <div className=\"song_rowInfo\">\n                <h1>{track.name}</h1>\n                <p>{track.artists.map((artist) => artist.name ).join(\", \")} -{\" \"}\n                    {track.album.name}\n                </p>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { PlayCircleFilled } from '@material-ui/icons'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\"\nimport { useDataLayerValue } from '../DataLayer'\nimport { Header } from './Header'\nimport {SongRow } from './SongRow'\nimport \"./styles/Body.css\"\n\nexport const Body = ({spotify}) => {\n    const [{discover_weekly} , dispatch] = useDataLayerValue()\n    //console.log(discover_weekly)\n    const playPlaylist = () => {\n        dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n          dispatch({\n            type: \"SET_PLAY_URI\",\n            play_uri: \"spotify:playlist:37i9dQZEVXcIdICMRECAXa\",\n          })\n          spotify.getMyCurrentPlayingTrack().then((r) => {\n            dispatch({\n              type: \"SET_ITEM\",\n              item: r.item,\n            })\n          })\n        }\n      \n    return (\n        <div className=\"body\">\n            <Header spotify/>\n            <div className=\"body_info\">\n                <img src={discover_weekly?.images[0].url} alt=\"banner\"></img>\n                <div className=\"body_infoText\">\n                    <strong>PLAYLIST</strong>\n                    <h2>Discover Weekly</h2>\n                    <p>{discover_weekly?.description}</p>\n                </div>\n            \n            </div>\n            <div className=\"body_songs\">\n                <div className=\"body_icons\">\n                    <PlayCircleFilled \n                        className=\"body_shuffle\"\n                        onClick={playPlaylist}\n                    />\n\n                    <FavoriteBorderIcon fontSize=\"large\" />\n                    <MoreHorizIcon/>\n                </div>\n                {discover_weekly?.tracks.items.map(item=> <SongRow key={item.track.name}  track={item.track}/>)}\n            </div>\n        </div>\n    )\n}","import React,{useEffect} from 'react'\nimport \"./styles/Footer.css\"\n/*import PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\"\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\"\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\"\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\"\nimport RepeatIcon from \"@material-ui/icons/Repeat\"\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\"\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\"\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\"\nimport { Grid, Slider } from \"@material-ui/core\"*/\nimport { useDataLayerValue } from '../DataLayer'\nimport SpotifyPlayer from 'react-spotify-web-playback'\n//npm i react-spotify-web-playback\n//https://github.com/gilbarbara/react-spotify-web-playback\n\nexport const Footer =({spotify})=>{\n    const [{play_uri, token, playing }, dispatch] = useDataLayerValue()\n\n    let track=null\n    useEffect(() => {\n        spotify.getMyCurrentPlaybackState().then((r) => {\n          console.log(r)\n    \n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: r.is_playing,\n          })\n    \n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n        })\n      }, [spotify,dispatch])\n\n     const handleChange = () => {\n        dispatch({\n          type: \"SET_ITEM\",\n          item: track,\n        })\n        if(!track.isPlaying){\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: track.isPlaying\n          })\n        }\n      }\n\n    /*  const skipNext = () => {\n        spotify.skipToNext()\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n        })\n      }\n\n      const skipPrevious = () => {\n        spotify.skipToPrevious()\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_ITEM\",\n            item: r.item,\n          })\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          })\n        })\n      }*/\n    return(\n        <footer >\n            <div className=\"footer_player_container\">\n            <SpotifyPlayer \n                name='Spotify-clone'\n                token={token}\n                uris={[play_uri]}\n                styles={{\n                    bgColor: ' #282828',\n                    color: '#fff',\n                    loaderColor: '#1DB954',\n                    sliderColor: '#1DB954',\n                    savedColor: '#fff',\n                    trackArtistColor: '#ccc',\n                    trackNameColor: '#fff',\n                    loaderSize:1.5,\n                    sliderHandleColor: \"#fff\"\n                  }}\n                play={playing}\n                callback={(state)=>{\n                    track=state\n                    if (track.isPlaying){\n                      handleChange()\n                    }\n                }}\n                />\n            </div>\n        </footer>\n    )\n}","import React from 'react'\nimport \"./styles/SidebarOption.css\"\n\nexport const SidebarOption = ({option, Icon})=>{\n    return(\n        <div className=\"sidebarOption\">\n            {Icon && <Icon className=\"sidebarOption_icon\"/>}\n            {Icon ?<h4>{option}</h4> :<p>{option}</p>}\n        </div>\n    )\n}","import React from 'react'\nimport { SidebarOption } from './SidebarOption'\nimport \"./styles/Sidebar.css\"\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined'\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined'\nimport { useDataLayerValue } from '../DataLayer'\n\n\nexport const Sidebar = () => {\n    const [{playlists}] = useDataLayerValue()\n    return(\n        <div className=\"sidebar\">\n            <img className=\"sidebar-logo\" src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"spotify-logo\"></img>\n            <SidebarOption option=\"Home\" Icon={HomeOutlinedIcon}/>\n            <SidebarOption option=\"Search\" Icon={SearchIcon}/>\n            <SidebarOption option=\"Your Library\" Icon={LibraryMusicOutlinedIcon}/>\n            <br/>\n            <strong className=\"sidebar_title\">PLAYLISTS</strong>\n            <hr/>\n\n            {playlists?.items?.map(playlist => (\n                <SidebarOption  key={playlist.id} option={playlist.name}/>\n            ))}\n        </div>\n    )\n}","import React from 'react'\nimport { Body } from './Body'\nimport { Footer } from './Footer'\nimport { Sidebar } from './Sidebar'\nimport \"./styles/Player.css\"\n\nconst Player = ({spotify}) => {\n    return(\n        <div className=\"player\">\n            <div className=\"player_body\">\n                <Sidebar/>\n                <Body spotify={spotify}/>\n            </div>\n                <Footer spotify={spotify}/>\n        </div>\n    )\n}\nexport default Player","import React,{ useEffect } from 'react'\nimport './App.css'\nimport Login from './components/Login'\nimport { getAccessToken } from './components/spotify'\nimport SpotifyWebApi from 'spotify-web-api-js'\n//npm i spotify-web-api-js \n//https://github.com/JMPerez/spotify-web-api-js\nimport Player from './components/Player'\nimport {useDataLayerValue} from './DataLayer'\n\n\nconst spotifyOb = new SpotifyWebApi()\n\nfunction App() {\n  //deployed\n    //const [token , setToken] = useState(null)\n    const [{token},dispatch] = useDataLayerValue()\n            //DataLayer.user is destructured in this\n            //state in {} will get everything\n    useEffect(() => {\n      const hash = getAccessToken();\n      window.location.hash=\"\"\n      const _token = hash.access_token\n\n      if (_token){\n\n        dispatch(\n          {\n            type: 'SET_TOKEN',\n            token: _token,\n          }\n        )\n        spotifyOb.setAccessToken(_token) //spotify object from spotify WebApi Wrapper which helps us communicate with Spotify app\n\n        spotifyOb.getMe().then(user => {\n          dispatch(\n            {\n              type: 'SET_USER',\n              user:user,\n            }\n          )\n        })\n        spotifyOb.getUserPlaylists().then((playlists) => {\n          dispatch(\n            {\n              type: 'SET_PLAYLISTS',\n              playlists:playlists,\n            }\n          )\n        })\n      }\n      spotifyOb.getMyTopArtists().then((response) =>\n        dispatch({\n          type: \"SET_TOP_ARTISTS\",\n          top_artists: response,\n        })\n      );\n\n      //enter your own discover weekly playlist id to get your songs\n      spotifyOb.getPlaylist(\"37i9dQZEVXcIdICMRECAXa\").then((response)=>{\n        dispatch(\n          {\n            type: 'SET_DISCOVER_WEEKLY',\n            discover_weekly:response,\n          }\n        )\n      })\n      \n    },[token,dispatch])\n  return (\n      \n    <div className=\"App\">\n      { token ?  <Player spotify={spotifyOb}/> :  <Login/>}\n    </div>\n  )\n\n}\n\nexport default App;\n\n\n//useEffect Hook \n/**\n * It runs a piece of code based on a given condition\n * It runs a function given inside it\n * //we give [] to specify it to run it only once\n * //if we put a variable inside [name,age] the useEffect will run whenever the name var changes.\n */\n\n //Problem: Prop Drilling\n //Solution:Context API","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {DataLayer} from './DataLayer'//StateProvider\nimport {initialState, reducer} from './reducer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      {/**\n       * Data Layer for the Context API\n       */}\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const initialState = {\n    user:null,\n    playlists:[],\n    discover_weekly: null,\n    top_artists: null,\n    playing:false,\n    item: null,\n    token:null,\n    play_uri:\"spotify:playlist:37i9dQZEVXcIdICMRECAXa\",\n    //enter your own discover weekly uri before production\n}//empty initialState\n\n//https://reactjs.org/docs/hooks-reference.html#usereducer\n//reducer = (state, action) => newState\n\nexport const reducer = (state , action) => {\n    //console.log(action)\n    //Action -> type, [payload]\n    switch(action.type) {\n        case 'SET_USER':\n        //whenever there's a set_user reducer a new state where the user in the initial is set to user\n            return {\n            /**\n             * this syntax is part of ES6 and not React itself and it's used by two operators - the Spread and Rest operators.\n                The Spread operator lets you expand an iterable like a string, object or array into its elements while the Rest operator does the inverse by reducing a set of elemnts into one array.\n             */\n                ...state, \n                user:action.user\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token:action.token\n            }\n        case 'SET_PLAYLISTS':\n          return{\n            ...state,\n            playlists:action.playlists,\n           \n          }\n          case 'SET_DISCOVER_WEEKLY':\n            return{\n              ...state,\n              discover_weekly:action.discover_weekly,\n            }\n          case 'SET_TOP_ARTISTS':\n            return{\n              ...state,\n              top_artists:action.top_artists,\n            }\n            case \"SET_PLAYING\":\n              return {\n                ...state,\n                playing: action.playing,\n              }\n        \n            case \"SET_ITEM\":\n              return {\n                ...state,\n                item: action.item,\n              }\n            case \"SET_PLAY_URI\":\n              return{\n                ...state,\n                play_uri:action.play_uri\n              }\n        default:\n            return state //if nothing happens just returns state as it is\n    }\n   \n}\n\n/**\n * this.state = {\n  stateObj: {\n    attr1: '',\n    attr2: '',\n  },\n}\nYou can use the Spread syntax to update the nested state object.\n\nthis.setState(state => ({\n  person: {\n    ...state.stateObj,\n    attr1: 'value1',\n    attr2: 'value2',\n  },\n}))\nThe Rest Ope\n */\n"],"sourceRoot":""}